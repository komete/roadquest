<% provide(:title, 'Cartes') %>

<section>
  <div class="page-header">
    <div class="container center">
      <h3 class="session">Création de cartes</h3>
    </div>
  </div>
  <div class="row">
    <div class="col-md-4">
      <div class="center" style="padding-left: 15px">
        <h4><strong>Exportation .pdf</strong></h4>
        <hr class="small">
        <form class="form">
          <label for="format">Format </label>
          <select id="format" name="format">
            <option value="a0">A0 (lent)</option>
            <option value="a1">A1</option>
            <option value="a2">A2</option>
            <option value="a3">A3</option>
            <option value="a4" selected>A4</option>
            <option value="a5">A5 (rapide)</option>
          </select>
          <label for="resolution">Résolution </label>
          <select id="resolution" name="resolution">
            <option value="72">72 dpi (rapide)</option>
            <option value="150">150 dpi</option>
            <option value="300">300 dpi (lent)</option>
          </select>
        </form>
        <button id="export-pdf">Exporter en PDF</button>
      </div>
      <br>
      <div class="center" style="padding-left: 15px">
        <h4><strong>Exportation .png</strong></h4>
        <hr class="small">
        <a id="export-png" class="btn btn-default" download="map.png"><i class="fa fa-download"></i> Download PNG</a>
      </div>
      <br>
    </div>

    <div class="col-md-6">
      <div class="container">
        <div id="map" class="map">
          <div id="popup" class="ol-popup">
            <a href="#" id="popup-closer" class="ol-popup-closer"></a>
            <div id="popup-content"></div>
          </div>
        </div>
      </div>
      <br>
      <div class="container center">
        <!--<button id="geolocation">Geolocalisation</button>-->
      </div>
    </div>
  </div>
  <div class="row">
    <div class="container">
      <div class="col-md-5"></div>
      <div class="col-md-2">
        <label for="critere">Critère de recherche:</label>
        <select name="critere" id="critere" class="foo">
          <option value="num_route" selected>Numéro de route</option>
          <option value="vocation">Vocation</option>
          <option value="nb_chausse">Nombre de chaussées</option>
          <option value="nb_voies">Nombre de voies</option>
          <option value="etat">État</option>
          <option value="acces">Accès</option>
          <option value="sens">Sens</option>
          <option value="class_adm">Classe administrative</option>
        </select>
        <label for="valeur">Valeur:</label>
        <select id="valeur-num_route" name="valeur-num_route" style="display: block">
          <% @num_route.each do |num| %>
            <option value="<%= num.num_route %>"><%= num.num_route %></option>
          <% end %>
        </select>
        <select id="valeur-vocation" name="valeur-vocation" style="display: none">
          <% @vocation.each do |num| %>
              <option value="<%= num.vocation %>"><%= num.vocation %></option>
          <% end %>
        </select>
        <select id="valeur-nb_chausse" name="valeur-nb_chausse" style="display: none">
          <% @nb_chausse.each do |num| %>
              <option value="<%= num.nb_chausse %>"><%= num.nb_chausse %></option>
          <% end %>
        </select>
        <select id="valeur-nb_voies" name="valeur-nb_voies" style="display: none">
          <% @nb_voies.each do |num| %>
              <option value="<%= num.nb_voies %>"><%= num.nb_voies %></option>
          <% end %>
        </select>
        <select id="valeur-etat" name="valeur-etat" style="display: none">
          <% @etat.each do |num| %>
              <option value="<%= num.etat %>"><%= num.etat %></option>
          <% end %>
        </select>
        <select id="valeur-acces" name="valeur-acces" style="display: none">
          <% @acces.each do |num| %>
              <option value="<%= num.acces %>"><%= num.acces %></option>
          <% end %>
        </select>
        <select id="valeur-sens" name="valeur-sens" style="display: none">
          <% @sens.each do |num| %>
              <option value="<%= num.sens %>"><%= num.sens %></option>
          <% end %>
        </select>
        <select id="valeur-class_adm" name="valeur-class_adm" style="display: none">
          <% @class_adm.each do |num| %>
              <option value="<%= num.class_adm %>"><%= num.class_adm %></option>
          <% end %>
        </select>
        <button type="submit" id="recherche" value="Rechercher" class="btn btn-default" onclick="search()">go !</button>
      </div>
      <div class="col-md-5"></div>
    </div>
  </div>
</section>
<script type="text/javascript">
  /* Export PDF constantes */
  var dimensions = {
    a0: [1189, 841],
    a1: [841, 594],
    a2: [594, 420],
    a3: [420, 297],
    a4: [297, 210],
    a5: [210, 148]
  };

  var loading = 0;
  var loaded = 0;

  /* Variables */
  var map;
  var mapquest;
  var vue;
  var overlay;
  var select;
  var vectorLayer;
  var old_selected = "num_route";
  var is_selected = "num_route";

  function message_erreur(message) {
    $('#message-erreur').slideDown(function() {
      this.innerHTML = '<p>'+ message +'</p>';
      setTimeout(function() {
        $('#message-erreur').slideUp();
      }, 2000);
    });
  }
  function getJson() {
    var geoJsonLayout = $.getJSON('troncon_routes.json', function (data) {
      geoJsonLayer(data);
    });
  }
  function search() {
    var param = $('#critere').val();
    var value = $("#valeur-"+is_selected).val();
    if(param == '' || value == '') {
      message_erreur("Erreur: recherche vide!");
    }else{
      var geoJsonLayout = $.getJSON('troncon_routes/search', {param: param, value: value}, function (data) {
        geoJsonLayer(data);
      });
    }
  }
  function geoJsonLayer(data) {
    if(data == null) {
      message_erreur("Aucun résultat !");
    }else {
      var layers = map.getLayers();
      layers.forEach(function (item) {
        var properties = item.getProperties();
        if (properties.name === 'troncons') {
          map.removeLayer(item);
        }
      });

      var src = data;
      var crs = {'type': 'name', 'properties': {'name': 'EPSG:2154'}};
      src.crs = crs;
      var vectorSource = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(src)
      });
      vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        visible: true,
        name: 'troncons',
        style: new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: 'black',
            width: 1
          })
        })
      });
      map.addLayer(vectorLayer);
    }
  }
  function init() {

    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');
    closer.onclick = function () {
      overlay.setPosition(undefined);
      closer.blur();
      return false;
    };
    overlay = new ol.Overlay(/** @type {olx.OverlayOptions} */ ({
      element: container,
      autoPan: true,
      autoPanAnimation: {
        duration: 250
      }
    }));

    /* Layer de base */
    mapquest = new ol.layer.Tile({
      source: new ol.source.MapQuest({layer: 'osm'}),
      visible: true,
      name: 'mapquest'
    });
    /* Projection */
    var extent = [99127, 6049547, 1242475, 7110624];
    var projection = new ol.proj.Projection({
      code: 'EPSG:2154',
      extent: [-357823.2365, 6037008.6939, 1313632.3628, 7230727.3772]
    });
    /* Vue */
    vue = new ol.View({
      projection: projection,
      center: ol.proj.fromLonLat([2.351, 48.8567], projection),
      extent: extent,
      zoom: 5,
      maxZoom: 18,
      minZoom: 3
    });

    /* Carte */
    select = new ol.interaction.Select({
      condition: ol.events.condition.click
    });

    map = new ol.Map({
      renderer: 'canvas',
      layers: [
        mapquest
      ],
      overlays: [overlay],
      target: 'map',
      controls: ol.control.defaults().extend([
        new ol.control.ScaleLine(),
        new ol.control.ZoomSlider(),
        new ol.control.FullScreen()
      ]),
      view: vue,
      interactions: ol.interaction.defaults().extend([select])
    });
    getJson();

    map.on('singleclick', function (evt) {
      var coordinate = evt.coordinate;
      var elem = select.getFeatures();
      var feature = elem.item(0);
      var resp = vectorLayer.getSource().getFeatureById(feature.getId()).getProperties()['num_route'];

      content.innerHTML = '<p>Numéro de route: ' + resp + '</p>';
      overlay.setPosition(coordinate);
    });
    map.on('pointermove', function (evt) {
      if (evt.dragging) {
        return;
      }
      var pixel = map.getEventPixel(evt.originalEvent);
      var hit = map.forEachLayerAtPixel(pixel, function (layer) {
        return true;
      });
      map.getTargetElement().style.cursor = hit ? 'pointer' : '';
    });
  }


  $(document).ready(function () {
    init();

    /* Form helper */

    $('#critere').click(function(){
      is_selected = $( "select.foo option:selected").val();
      var old= document.getElementById("valeur-"+old_selected);
      old.style.display = 'none';
      var select = document.getElementById("valeur-"+is_selected);
      select.style.display = 'block';
      old_selected = is_selected;
    });
    $('#critere').change(function(){
      is_selected = $( "select.foo option:selected").val();
      var old= document.getElementById("valeur-"+old_selected);
      old.style.display = 'none';
      var select = document.getElementById("valeur-"+is_selected);
      select.style.display = 'block';
      old_selected = is_selected;
    });
    /* end form */

    var geolocation = new ol.Geolocation({
      projection: map.getView().getProjection(),
      tracking: true
    });
    $('#geolocation').click(function () {
      var position = geolocation.getPosition();

      var point = new ol.layer.Vector({
        source: new ol.source.Vector({
          features: [
            new ol.Feature({
              geometry: new ol.geom.Point(position)
            })
          ]
        })
      });
      map.addLayer(point);
      map.getView().setCenter(position);
      map.getView().setResolution(2.388657133911758);
      return false;
    });

    /*
     Librairie: https://github.com/MrRio/jsPDF
     Référence: OpenLayers 3 API
     */
    var button_pdf = document.getElementById('export-pdf');
    $('#export-pdf').click(function () {

      button_pdf.disabled = true;
      document.body.style.cursor = 'progress';

      var format = document.getElementById('format').value;
      var resolution = document.getElementById('resolution').value;
      var dimension = dimensions[format];
      var width = Math.round(dimension[0] * resolution / 25.4);
      var height = Math.round(dimension[1] * resolution / 25.4);
      var size = /** @type {ol.Size} */ (map.getSize());
      var extent = map.getView().calculateExtent(size);

      var source = mapquest.getSource();

      var tileLoadStart = function () {
        ++loading;
      };

      var tileLoadEnd = function () {
        ++loaded;
        if (loading === loaded) {
          var canvas = this;
          window.setTimeout(function () {
            loading = 0;
            loaded = 0;
            var date_time = new Date();
            var data = canvas.toDataURL('image/png');
            var pdf = new jsPDF('landscape', undefined, format);
            pdf.addImage(data, 'JPEG', 0, 0, dimension[0], dimension[1]);
            pdf.save('Roadquest-map-' + date_time + '.pdf');
            source.un('tileloadstart', tileLoadStart);
            source.un('tileloadend', tileLoadEnd, canvas);
            source.un('tileloaderror', tileLoadEnd, canvas);
            map.setSize(size);
            map.getView().fit(extent, size);
            map.renderSync();
            button_pdf.disabled = false;
            document.body.style.cursor = 'auto';
          }, 100);
        }
      };

      map.once('postcompose', function (event) {
        source.on('tileloadstart', tileLoadStart);
        source.on('tileloadend', tileLoadEnd, event.context.canvas);
        source.on('tileloaderror', tileLoadEnd, event.context.canvas);
      });

      map.setSize([width, height]);
      map.getView().fit(extent, /** @type {ol.Size} */ (map.getSize()));
      map.renderSync();
      return false;

    });

    var button_png = document.getElementById('export-png');
    button_png.addEventListener('click', function () {
      button_png.setAttribute('download', 'Roadquest-map-' + new Date() + '.png');
      map.once('postcompose', function (event) {
        document.body.style.cursor = 'progress';
        var canvas = event.context.canvas;
        button_png.href = canvas.toDataURL('image/png');
        document.body.style.cursor = 'auto';
      });
      map.renderSync();
    }, false);

  });
</script>
